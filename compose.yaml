# Общие настройки
x-common-settings: &common_settings
  build:
    context: ./app
    dockerfile: Dockerfile
  volumes:
    - ./.env:/app/.env  # Примонтируем файл .env в контейнер
    - static_volume:/app/static  # Монтируем том для статики
    - media_volume:/app/images/   # Монтируем папку uploaded/ на хосте в images/ в контейнере
  env_file:
    - .env
  labels:
    project_name: ${PROJECT_NAME}
  networks:
    - backend_network
  restart: always  # Добавляем перезапуск для всех сервисов

services:
  app:
    <<: *common_settings
    container_name: ${PROJECT_NAME}_django_app
    command: gunicorn server.wsgi:application --bind 0.0.0.0:8000
    depends_on:
      - db
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s 

  celery:
    <<: *common_settings
    container_name: ${PROJECT_NAME}_celery_worker
    command: poetry run celery -A server worker --loglevel=info

  celery_beat:
    <<: *common_settings
    container_name: ${PROJECT_NAME}_celery_beat
    command: poetry run celery -A server beat --loglevel=info

  front:
    build:
      context: ./front
      dockerfile: Dockerfile
    container_name: ${PROJECT_NAME}_front
    env_file:
      - .env
    labels:
      project_name: ${PROJECT_NAME}
    networks:
      - backend_network
    depends_on:
      - app
    restart: always  # Добавляем перезапуск для фронтенда

  redis:
    image: redis:7
    container_name: ${PROJECT_NAME}_redis
    labels:
      project_name: ${PROJECT_NAME}  # Метка для redis
    networks:
      - backend_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    restart: always  # Добавляем перезапуск для Redis

  db:
    image: postgres:15
    container_name: ${PROJECT_NAME}_postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    env_file:
      - .env
    networks:
      - backend_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $POSTGRES_DB -U $POSTGRES_USER"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    restart: always  # Добавляем перезапуск для PostgreSQL

  nginx:
    image: nginx:latest
    container_name: ${PROJECT_NAME}_nginx
    ports:
      - "${NGINX_PORT:-80}:80"  # Только Nginx доступен снаружи через порт 80
    volumes:
      - ./nginx:/etc/nginx/conf.d
      - static_volume:/app/static  # Монтируем том для статики
      - media_volume:/media/ 
    depends_on:
      - front
      - app
    networks:
      - backend_network
    labels:
      project_name: ${PROJECT_NAME}
    restart: always  # Добавляем перезапуск для Nginx

  dozzle:
    image: amir20/dozzle:latest
    container_name: ${PROJECT_NAME}_dozzle
    ports:
      - "${DOZZLE_PORT:-8001}:8080"  # Dozzle доступен снаружи через порт 8001
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock  # Доступ к Docker socket для Dozzle
    environment:
        DOZZLE_FILTER: label=project_name=${PROJECT_NAME}
    read_only: true  # Только для чтения
    depends_on:
      - app
      - celery
      - celery_beat
    networks:
      - backend_network
    labels:
      project_name: ${PROJECT_NAME}  # Метка для dozzle
    restart: always  # Добавляем перезапуск для Dozzle

# Сети
networks:
  backend_network:
    driver: bridge

# Тома
volumes:
  postgres_data:
  static_volume:  # Общий том для статики
  media_volume:
    driver: local
    driver_opts:
      type: none
      device: ./uploaded/
      o: bind